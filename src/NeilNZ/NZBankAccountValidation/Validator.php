<?php

/**
 * @author Neil Bertram <neil@fishy.net.nz>
 * @copyright Copyright(c) 2015 Neil Bertram
 * @link https://github.com/nbertram/nz_bank_account_validation_php
 * @license GPL v3 or later, see LICENSE
 */

namespace NeilNZ\NZBankAccountValidation;

/**
 * This class provides utility methods for validating a New Zealand bank account
 * number, using the specifications published by the IRD.
 * @see http://www.ird.govt.nz/resources/5/0/502c0d02-4a12-493a-8d6d-cf0560071c7d/payroll-spec-2016-v1+2.pdf
 * It requires the number split up into Bank, Branch, Account and Suffix parts.
 */
class Validator
{
    public static function validate($bank, $branch, $account, $suffix)
    {
        // This maps algorithms to multipliers. Generated by scripts/codegen.php
        $algMap = array(
            'A' => array(0, 0, 6, 3, 7, 9, 0, 0, 10, 5, 8, 4, 2, 1, 0, 0, 0, 0, 11),
            'B' => array(0, 0, 0, 0, 0, 0, 0, 0, 10, 5, 8, 4, 2, 1, 0, 0, 0, 0, 11),
            'C' => array(3, 7, 0, 0, 0, 0, 9, 1, 10, 5, 3, 4, 2, 1, 0, 0, 0, 0, 11),
            'D' => array(0, 0, 0, 0, 0, 0, 0, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 11),
            'E' => array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 3, 2, 0, 0, 0, 1, 11),
            'F' => array(0, 0, 0, 0, 0, 0, 0, 1, 7, 3, 1, 7, 3, 1, 0, 0, 0, 0, 10),
            'G' => array(0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 1, 3, 7, 1, 0, 3, 7, 1, 10),
            'X' => array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1),
        );

        // Combine the bank/branch/account/suffix digits into a single string and remove the hyphens
        $formatted = self::format($bank, $branch, $account, $suffix);
        $digits = preg_replace('/[^\d]/', '', $formatted);

        // Work out which algorithm to apply
        $algorithm = self::getAlgorithm($bank, $branch, $account, $suffix);

        if ($algorithm === false) {
            // Unknown bank or account range
            return false;
        } elseif (!isset($algMap[$algorithm])) {
            // This isn't very good, probably points to a need to update the map.
            return false;
        }

        // Pick a multiplier line based on the algorithm letter
        $multipliers = $algMap[$algorithm];

        // The modulo for the checksum is the last digit in the map
        $modulo = array_pop($multipliers);

        // Calculate the checksum
        $sum = 0;
        foreach ($multipliers as $idx => $mult) {
            $product = $digits[$idx] * $mult;
            if ($algorithm == 'E' || $algorithm == 'G') {
                // For these, we need to sum the 'tens' and 'ones' cols of the product,
                // then repeat on the result of that, and discard the original product
                $product = str_pad($product, 2, '0', STR_PAD_LEFT);
                $tensCol = (int)substr($product, -2, 1);
                $onesCol = (int)substr($product, -1, 1);
                $result1 = str_pad(($tensCol + $onesCol), 2, '0', STR_PAD_LEFT);
                $tensCol = (int)substr($result1, -2, 1);
                $onesCol = (int)substr($result1, -1, 1);
                $result2 = $tensCol + $onesCol;
                $sum += $result2;
            } else {
                $sum += $product;
            }
        }

        // If the remainder is 0, the number is valid
        $remainder = $sum % $modulo;
        return ($remainder == 0);
    }

    /**
     * Returns which of the single-lettered algorithms this account number is using
     *
     * @param $bank the bank code (2 digit)
     * @param $branch the branch code (4 digits)
     * @param $account the account number (7 digits)
     * @param $suffix the suffix (2-4 digits)
     */
    public static function getAlgorithm($bank, $branch, $account, $suffix)
    {
        if ($bank == '01' && (($branch >= 1 && $branch <= 999) || ($branch >= 1100 && $branch <= 1199) || ($branch >= 1800 && $branch <= 1899))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '02' && (($branch >= 1 && $branch <= 999) || ($branch >= 1200 && $branch <= 1299))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '03' && (($branch >= 1 && $branch <= 999) || ($branch >= 1300 && $branch <= 1399) || ($branch >= 1500 && $branch <= 1599) || ($branch >= 1700 && $branch <= 1799) || ($branch >= 1900 && $branch <= 1999))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '06' && (($branch >= 1 && $branch <= 999) || ($branch >= 1400 && $branch <= 1499))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '08' && ($branch >= 6500 && $branch <= 6599)) {
            return 'D';
        } elseif ($bank == '09' && $branch == '0000') {
            return 'E';
        } elseif ($bank == '11' && (($branch >= 5000 && $branch <= 6499) || ($branch >= 6600 && $branch <= 8999))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '12' && (($branch >= 3000 && $branch <= 3299) || ($branch >= 3400 && $branch <= 3499) || ($branch >= 3600 && $branch <= 3699))) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '13' && ($branch >= 4900 && $branch <= 4999)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '14' && ($branch >= 4700 && $branch <= 4799)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '15' && ($branch >= 3900 && $branch <= 3999)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '16' && ($branch >= 4400 && $branch <= 4499)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '17' && ($branch >= 3300 && $branch <= 3399)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '18' && ($branch >= 3500 && $branch <= 3599)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '19' && ($branch >= 4600 && $branch <= 4649)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '20' && ($branch >= 4100 && $branch <= 4199)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '21' && ($branch >= 4800 && $branch <= 4899)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '22' && ($branch >= 4000 && $branch <= 4049)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '23' && ($branch >= 3700 && $branch <= 3799)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '24' && ($branch >= 4300 && $branch <= 4349)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '25' && ($branch >= 2500 && $branch <= 2599)) {
            return 'F';
        } elseif ($bank == '26' && ($branch >= 2600 && $branch <= 2699)) {
            return 'G';
        } elseif ($bank == '27' && ($branch >= 3800 && $branch <= 3849)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '28' && ($branch >= 2100 && $branch <= 2149)) {
            return 'G';
        } elseif ($bank == '29' && ($branch >= 2150 && $branch <= 2299)) {
            return 'G';
        } elseif ($bank == '30' && ($branch >= 2900 && $branch <= 2949)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '31' && ($branch >= 2800 && $branch <= 2849)) {
            return 'X';
        } elseif ($bank == '33' && ($branch >= 6700 && $branch <= 6799)) {
            return 'F';
        } elseif ($bank == '35' && ($branch >= 2400 && $branch <= 2499)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } elseif ($bank == '38' && ($branch >= 9000 && $branch <= 9499)) {
            if ($account < 990000) {
                return 'A';
            } else {
                return 'B';
            }
        } else {
            return false;
        }
    }

    /**
     * Formats an account number in the IRD (or more common...) formats
     */
    public static function format($bank, $branch, $account, $suffix, $shortSuffix = false)
    {
        $bank = str_pad(intval($bank), 2, '0', STR_PAD_LEFT);
        $branch = str_pad(intval($branch), 4, '0', STR_PAD_LEFT);
        $account = str_pad(intval($account), 8, '0', STR_PAD_LEFT);
        $suffix = str_pad(intval($suffix), $shortSuffix ? 2 : 4, '0', STR_PAD_LEFT);

        return "$bank-$branch-$account-$suffix";
    }
}
